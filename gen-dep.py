#!/usr/bin/env python

import re
import os
from os.path import isfile, isdir, join

def extract_planitar_image(s):
    m = re.match('^.*(planitar/[-a-zA-Z0-9]+).*$', s)
    if m != None:
        return m.group(1)

def dockerfile(d):
    return join(d, 'Dockerfile')

def image_dirs():
    for d in os.listdir("."):
        if not isdir(d):
            continue
        if not isfile(dockerfile(d)):
            continue
        yield d

def get_base_image(d):
    for line in open(dockerfile(d)):
        if line.startswith('FROM '):
            return extract_planitar_image(line)

def get_image_name(d):
    for line in open(join(d, 'Makefile')):
        m = re.match('^\tdocker push planitar', line)
        if m != None:
	    return extract_planitar_image(line)

def get_image_deps(d):
    for line in open(join(d, 'Makefile')):
        m = re.search('docker', line)
	if m != None:
	    yield extract_planitar_image(line)

class Image:
    def __init__(self, dir):
        self.dir = dir
        self.name = get_image_name(self.dir)
        self.basename = get_base_image(self.dir)
	# Remove the Nones and circular dependency, GNU make will take care of
	# the rest (including the duplicates)
	self.prerequisites = [ dep
		for dep in get_image_deps(self.dir)
		if dep != None and dep != self.name ]
    def is_root(self):
	return self.basename == None
    def buildtarget(self):
	return "build/%s" % self.name
    def dep_list(self):
	if self.is_root():
	    return []
	res = [d for d in self.prerequisites]
	res.append(self.basename)
	return res
    def __repr__(self):
        return str(self)
    def __str__(self):
        return "Image<n=%s,dir=%s,base=%s,dep=%s>" % (self.name, self.dir,
		self.basename, self.prerequisites)

images = [ Image(d) for d in image_dirs() ]

buildtarget = lambda n: "build/%s" % n
targets = lambda ns: " ".join(buildtarget(n) for n in ns)

print '# The file was generated by gen-dep.py.'
print '# Don\'t change this file manually.'
print ''
print '.PHONY: build push %s' % targets(i.name for i in images)
print ''
print 'build: %s' % targets(i.name for i in images)
print ''
print 'push: build'
for image in images:
    print '\tdocker push %s' % image.name
print ''
print 'clean: '
for image in images:
    print '\tmake -C %s clean' % image.dir
print ''
for image in images:
    print '%s: %s' % (buildtarget(image.name),
	    targets(d for d in image.dep_list()))
    print '\tmake -C %s build' % image.dir
    print '\tmake -C %s test' % image.dir
    print ''
