#!/usr/bin/env python

import re
import os
from os.path import isfile, isdir, join

def dockerfile(d):
    return join(d, 'Dockerfile')

def image_dirs():
    for d in os.listdir("."):
        if not isdir(d):
            continue
        if not isfile(dockerfile(d)):
            continue
        yield d

def get_base_image(d):
    for line in open(dockerfile(d)):
        if line.startswith('FROM '):
            return line[4:].strip()

def get_image_name(d):
    for line in open(join(d, 'Makefile')):
        m = re.match('^\tdocker push (planitar/[-a-z]+)', line)
        if m != None:
            return m.group(1)

class Image:
    def __init__(self, name, dir, base):
        self.name = name
        self.dir = dir
        self.basename = base
        self.isRoot = False
        self.children = []
    def __repr__(self):
        return str(self)
    def __str__(self):
        return "Image<n=%s,d=%s,b=%s>" % (self.name, self.dir, self.basename)

class ImageTree:
    def __init__(self):
        self.root = None
        self.nodes = []
    def generate(self):
        deps = {}
        for d in image_dirs():
            name = get_image_name(d)
            node = Image(name, d, get_base_image(d))
            deps[name] = node
            self.nodes.append(node)
        for k, v in deps.iteritems():
            if v.basename in deps:
                deps[v.basename].children.append(v)
            else:
                if self.root:
                    raise Exception("More than one root detected: %s and %s" % (self.root, v))
                self.root = v
                self.root.isRoot = True
    def traverse(self):
        q = [self.root]
        while len(q) > 0:
            node = q[0]
            yield node
            q.remove(node)
            for c in node.children:
                q.append(c)

# ImageTree is an overkill for dependency generation, but we already have it so
# we're going to use it.
tree = ImageTree()
tree.generate()

buildtarget = lambda n: "build/%s" % n
targets = " ".join(buildtarget(i.name) for i in tree.nodes)
print '# The file was generated by gen-dep.py.'
print '# Don\'t change this file manually.'
print ''
print '.PHONY: build push %s' % targets
print ''
print 'build: %s' % targets
print ''
print 'push: build'
for image in tree.nodes:
    print '\tdocker push %s' % image.name
print ''
print 'clean: '
for image in tree.nodes:
    print '\tmake -C %s clean' % image.dir
print ''
for image in tree.nodes:
    if image.isRoot:
        print '%s:' % buildtarget(image.name)
    else:
        print '%s: %s' % (buildtarget(image.name), buildtarget(image.basename))
    print '\tmake -C %s build' % image.dir
    print '\tmake -C %s test' % image.dir
    print ''
